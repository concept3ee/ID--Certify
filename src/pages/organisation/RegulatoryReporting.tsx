import React, { useState } from 'react'
import { 
  FileText, 
  Download, 
  Upload, 
  Plus, 
  Edit, 
  Eye, 
  Trash2, 
  MoreVertical, 
  Calendar, 
  Clock, 
  CheckCircle, 
  AlertTriangle, 
  Settings, 
  RefreshCw, 
  Filter, 
  Search, 
  Bell, 
  Target, 
  Shield, 
  Globe, 
  Building, 
  Users, 
  BarChart3, 
  PieChart, 
  TrendingUp, 
  TrendingDown,
  Activity,
  Zap,
  Info,
  ExternalLink,
  ChevronDown,
  ChevronUp,
  Star,
  Award,
  Flag
} from 'lucide-react'

interface RegulatoryReport {
  id: string
  name: string
  type: 'quarterly' | 'annual' | 'incident' | 'audit' | 'compliance'
  status: 'draft' | 'in-progress' | 'review' | 'approved' | 'submitted' | 'filed'
  regulatoryBody: string
  jurisdiction: string
  dueDate: string
  submittedDate?: string
  assignedTo: string
  createdBy: string
  reviewedBy?: string
  approvedBy?: string
  sections: ReportSection[]
  attachments: string[]
  notes: string
  priority: 'low' | 'medium' | 'high' | 'critical'
  autoGenerated: boolean
  lastUpdated: string
}

interface ReportSection {
  id: string
  title: string
  content: string
  status: 'complete' | 'in-progress' | 'pending'
  required: boolean
  wordCount: number
}

interface ReportTemplate {
  id: string
  name: string
  type: string
  regulatoryBody: string
  sections: string[]
  lastUsed: string
  usageCount: number
}

const RegulatoryReporting = () => {
  const [activeTab, setActiveTab] = useState<'reports' | 'templates' | 'schedules' | 'analytics'>('reports')
  const [selectedReport, setSelectedReport] = useState<string | null>(null)
  const [expandedReports, setExpandedReports] = useState<Set<string>>(new Set())
  const [searchTerm, setSearchTerm] = useState('')
  const [filterStatus, setFilterStatus] = useState<string>('all')
  const [filterType, setFilterType] = useState<string>('all')

  // Mock data
  const reports: RegulatoryReport[] = [
    {
      id: '1',
      name: 'Q4 2023 Compliance Report',
      type: 'quarterly',
      status: 'submitted',
      regulatoryBody: 'FinCEN',
      jurisdiction: 'US',
      dueDate: '2024-01-31',
      submittedDate: '2024-01-28',
      assignedTo: 'Sarah Johnson',
      createdBy: 'Mike Chen',
      reviewedBy: 'David Wilson',
      approvedBy: 'David Wilson',
      sections: [
        { id: '1-1', title: 'Executive Summary', content: 'Summary of compliance activities...', status: 'complete', required: true, wordCount: 500 },
        { id: '1-2', title: 'Risk Assessment', content: 'Detailed risk analysis...', status: 'complete', required: true, wordCount: 1200 }
      ],
      attachments: ['Q4_Data.xlsx', 'Risk_Assessment.pdf'],
      notes: 'Submitted on time with all required sections',
      priority: 'high',
      autoGenerated: true,
      lastUpdated: '2024-01-28'
    },
    {
      id: '2',
      name: 'Annual GDPR Report 2023',
      type: 'annual',
      status: 'in-progress',
      regulatoryBody: 'ICO',
      jurisdiction: 'UK',
      dueDate: '2024-03-31',
      assignedTo: 'Emma Davis',
      createdBy: 'Sarah Johnson',
      sections: [
        { id: '2-1', title: 'Data Processing Activities', content: 'Overview of data processing...', status: 'complete', required: true, wordCount: 800 },
        { id: '2-2', title: 'Data Breach Incidents', content: 'Report on any breaches...', status: 'in-progress', required: true, wordCount: 200 }
      ],
      attachments: [],
      notes: 'In progress - 60% complete',
      priority: 'medium',
      autoGenerated: false,
      lastUpdated: '2024-01-20'
    }
  ]

  const templates: ReportTemplate[] = [
    {
      id: '1',
      name: 'FinCEN Quarterly Report',
      type: 'quarterly',
      regulatoryBody: 'FinCEN',
      sections: ['Executive Summary', 'Risk Assessment', 'Compliance Activities', 'Incidents'],
      lastUsed: '2024-01-28',
      usageCount: 12
    },
    {
      id: '2',
      name: 'GDPR Annual Report',
      type: 'annual',
      regulatoryBody: 'ICO',
      sections: ['Data Processing', 'Breach Incidents', 'DPO Activities', 'Training'],
      lastUsed: '2023-12-31',
      usageCount: 3
    }
  ]

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'filed': return 'text-green-600 bg-green-100'
      case 'submitted': return 'text-blue-600 bg-blue-100'
      case 'approved': return 'text-green-600 bg-green-100'
      case 'review': return 'text-yellow-600 bg-yellow-100'
      case 'in-progress': return 'text-orange-600 bg-orange-100'
      case 'draft': return 'text-gray-600 bg-gray-100'
      default: return 'text-gray-600 bg-gray-100'
    }
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'critical': return 'text-red-600 bg-red-100'
      case 'high': return 'text-orange-600 bg-orange-100'
      case 'medium': return 'text-yellow-600 bg-yellow-100'
      case 'low': return 'text-green-600 bg-green-100'
      default: return 'text-gray-600 bg-gray-100'
    }
  }

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'quarterly': return <Calendar className="w-4 h-4" />
      case 'annual': return <Award className="w-4 h-4" />
      case 'incident': return <AlertTriangle className="w-4 h-4" />
      case 'audit': return <Shield className="w-4 h-4" />
      case 'compliance': return <CheckCircle className="w-4 h-4" />
      default: return <FileText className="w-4 h-4" />
    }
  }

  const toggleReportExpansion = (reportId: string) => {
    const newExpanded = new Set(expandedReports)
    if (newExpanded.has(reportId)) {
      newExpanded.delete(reportId)
    } else {
      newExpanded.add(reportId)
    }
    setExpandedReports(newExpanded)
  }

  const filteredReports = reports.filter(report => {
    const matchesSearch = report.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         report.regulatoryBody.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesStatus = filterStatus === 'all' || report.status === filterStatus
    const matchesType = filterType === 'all' || report.type === filterType
    return matchesSearch && matchesStatus && matchesType
  })

  const totalReports = reports.length
  const submittedReports = reports.filter(r => r.status === 'submitted' || r.status === 'filed').length
  const inProgressReports = reports.filter(r => r.status === 'in-progress' || r.status === 'review').length
  const overdueReports = reports.filter(r => new Date(r.dueDate) < new Date() && r.status !== 'submitted' && r.status !== 'filed').length

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Regulatory Reporting</h1>
          <p className="text-gray-600 mt-1">Automated regulatory report generation and submission</p>
        </div>
        <div className="flex items-center space-x-3">
          <button className="flex items-center px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50">
            <Download className="w-4 h-4 mr-2" />
            Export
          </button>
          <button className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
            <Plus className="w-4 h-4 mr-2" />
            New Report
          </button>
        </div>
      </div>

      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-white rounded-lg border border-gray-200 p-6">
          <div className="flex items-center">
            <div className="flex items-center justify-center w-12 h-12 bg-blue-100 rounded-lg">
              <FileText className="w-6 h-6 text-blue-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Total Reports</p>
              <p className="text-2xl font-bold text-gray-900">{totalReports}</p>
            </div>
          </div>
        </div>
        <div className="bg-white rounded-lg border border-gray-200 p-6">
          <div className="flex items-center">
            <div className="flex items-center justify-center w-12 h-12 bg-green-100 rounded-lg">
              <CheckCircle className="w-6 h-6 text-green-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Submitted</p>
              <p className="text-2xl font-bold text-gray-900">{submittedReports}</p>
            </div>
          </div>
        </div>
        <div className="bg-white rounded-lg border border-gray-200 p-6">
          <div className="flex items-center">
            <div className="flex items-center justify-center w-12 h-12 bg-yellow-100 rounded-lg">
              <Clock className="w-6 h-6 text-yellow-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">In Progress</p>
              <p className="text-2xl font-bold text-gray-900">{inProgressReports}</p>
            </div>
          </div>
        </div>
        <div className="bg-white rounded-lg border border-gray-200 p-6">
          <div className="flex items-center">
            <div className="flex items-center justify-center w-12 h-12 bg-red-100 rounded-lg">
              <AlertTriangle className="w-6 h-6 text-red-600" />
            </div>
            <div className="ml-4">
              <p className="text-sm font-medium text-gray-600">Overdue</p>
              <p className="text-2xl font-bold text-gray-900">{overdueReports}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Tab Navigation */}
      <div className="border-b border-gray-200">
        <nav className="-mb-px flex space-x-8 overflow-x-auto">
          {[
            { id: 'reports', name: 'Reports', icon: FileText },
            { id: 'templates', name: 'Templates', icon: Settings },
            { id: 'schedules', name: 'Schedules', icon: Calendar },
            { id: 'analytics', name: 'Analytics', icon: BarChart3 }
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as any)}
              className={`flex items-center py-2 px-1 border-b-2 font-medium text-sm ${
                activeTab === tab.id
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <tab.icon className="w-4 h-4 mr-2" />
              {tab.name}
            </button>
          ))}
        </nav>
      </div>

      {/* Tab Content */}
      {activeTab === 'reports' && (
        <div className="space-y-6">
          {/* Search and Filters */}
          <div className="bg-white rounded-lg border border-gray-200 p-4">
            <div className="flex items-center space-x-4">
              <div className="flex-1">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                  <input
                    type="text"
                    placeholder="Search reports..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm"
                  />
                </div>
              </div>
              <select
                value={filterStatus}
                onChange={(e) => setFilterStatus(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-lg text-sm"
              >
                <option value="all">All Status</option>
                <option value="draft">Draft</option>
                <option value="in-progress">In Progress</option>
                <option value="review">Review</option>
                <option value="approved">Approved</option>
                <option value="submitted">Submitted</option>
                <option value="filed">Filed</option>
              </select>
              <select
                value={filterType}
                onChange={(e) => setFilterType(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-lg text-sm"
              >
                <option value="all">All Types</option>
                <option value="quarterly">Quarterly</option>
                <option value="annual">Annual</option>
                <option value="incident">Incident</option>
                <option value="audit">Audit</option>
                <option value="compliance">Compliance</option>
              </select>
              <button className="flex items-center px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50">
                <Filter className="w-4 h-4 mr-2" />
                Filter
              </button>
            </div>
          </div>

          {/* Reports List */}
          <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
            <div className="px-6 py-4 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900">Regulatory Reports ({filteredReports.length})</h3>
            </div>
            <div className="divide-y divide-gray-200">
              {filteredReports.map((report) => (
                <div key={report.id} className="p-6">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      <button
                        onClick={() => toggleReportExpansion(report.id)}
                        className="flex items-center justify-center w-8 h-8 rounded-lg hover:bg-gray-100"
                      >
                        {expandedReports.has(report.id) ? (
                          <ChevronDown className="w-4 h-4" />
                        ) : (
                          <ChevronUp className="w-4 h-4" />
                        )}
                      </button>
                      <div className="flex items-center justify-center w-10 h-10 bg-gray-100 rounded-lg">
                        {getTypeIcon(report.type)}
                      </div>
                      <div>
                        <h4 className="font-medium text-gray-900">{report.name}</h4>
                        <p className="text-sm text-gray-600">
                          {report.regulatoryBody} • {report.jurisdiction} • Due: {report.dueDate}
                        </p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-3">
                      <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(report.status)}`}>
                        {report.status}
                      </span>
                      <span className={`px-2 py-1 text-xs font-medium rounded-full ${getPriorityColor(report.priority)}`}>
                        {report.priority}
                      </span>
                      {report.autoGenerated && (
                        <span className="px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full">
                          Auto
                        </span>
                      )}
                    </div>
                  </div>

                  {expandedReports.has(report.id) && (
                    <div className="mt-6 ml-12 space-y-6">
                      {/* Report Details */}
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <div>
                          <h5 className="text-sm font-medium text-gray-700 mb-2">Report Information</h5>
                          <div className="space-y-2 text-sm">
                            <div className="flex justify-between">
                              <span className="text-gray-600">Type:</span>
                              <span className="text-gray-900 capitalize">{report.type}</span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-gray-600">Regulatory Body:</span>
                              <span className="text-gray-900">{report.regulatoryBody}</span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-gray-600">Jurisdiction:</span>
                              <span className="text-gray-900">{report.jurisdiction}</span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-gray-600">Due Date:</span>
                              <span className="text-gray-900">{report.dueDate}</span>
                            </div>
                          </div>
                        </div>

                        <div>
                          <h5 className="text-sm font-medium text-gray-700 mb-2">Assignment</h5>
                          <div className="space-y-2 text-sm">
                            <div className="flex justify-between">
                              <span className="text-gray-600">Assigned To:</span>
                              <span className="text-gray-900">{report.assignedTo}</span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-gray-600">Created By:</span>
                              <span className="text-gray-900">{report.createdBy}</span>
                            </div>
                            {report.reviewedBy && (
                              <div className="flex justify-between">
                                <span className="text-gray-600">Reviewed By:</span>
                                <span className="text-gray-900">{report.reviewedBy}</span>
                              </div>
                            )}
                            {report.approvedBy && (
                              <div className="flex justify-between">
                                <span className="text-gray-600">Approved By:</span>
                                <span className="text-gray-900">{report.approvedBy}</span>
                              </div>
                            )}
                          </div>
                        </div>

                        <div>
                          <h5 className="text-sm font-medium text-gray-700 mb-2">Progress</h5>
                          <div className="space-y-2 text-sm">
                            <div className="flex justify-between">
                              <span className="text-gray-600">Sections:</span>
                              <span className="text-gray-900">
                                {report.sections.filter(s => s.status === 'complete').length}/{report.sections.length}
                              </span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-gray-600">Word Count:</span>
                              <span className="text-gray-900">
                                {report.sections.reduce((sum, s) => sum + s.wordCount, 0).toLocaleString()}
                              </span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-gray-600">Last Updated:</span>
                              <span className="text-gray-900">{report.lastUpdated}</span>
                            </div>
                            {report.submittedDate && (
                              <div className="flex justify-between">
                                <span className="text-gray-600">Submitted:</span>
                                <span className="text-gray-900">{report.submittedDate}</span>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>

                      {/* Sections */}
                      <div>
                        <h5 className="text-sm font-medium text-gray-700 mb-3">Report Sections ({report.sections.length})</h5>
                        <div className="space-y-3">
                          {report.sections.map((section) => (
                            <div key={section.id} className="flex items-center justify-between p-3 border border-gray-200 rounded-lg">
                              <div className="flex items-center space-x-3">
                                <div className={`flex items-center justify-center w-8 h-8 rounded-lg ${
                                  section.status === 'complete' ? 'bg-green-100' :
                                  section.status === 'in-progress' ? 'bg-yellow-100' : 'bg-gray-100'
                                }`}>
                                  {section.status === 'complete' ? (
                                    <CheckCircle className="w-4 h-4 text-green-600" />
                                  ) : section.status === 'in-progress' ? (
                                    <Clock className="w-4 h-4 text-yellow-600" />
                                  ) : (
                                    <FileText className="w-4 h-4 text-gray-600" />
                                  )}
                                </div>
                                <div>
                                  <p className="text-sm font-medium text-gray-900">{section.title}</p>
                                  <p className="text-xs text-gray-500">{section.wordCount} words</p>
                                </div>
                              </div>
                              <div className="flex items-center space-x-2">
                                <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                                  section.status === 'complete' ? 'text-green-600 bg-green-100' :
                                  section.status === 'in-progress' ? 'text-yellow-600 bg-yellow-100' : 'text-gray-600 bg-gray-100'
                                }`}>
                                  {section.status}
                                </span>
                                {section.required && (
                                  <span className="px-2 py-1 text-xs bg-red-100 text-red-800 rounded-full">
                                    Required
                                  </span>
                                )}
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>

                      {/* Attachments */}
                      {report.attachments.length > 0 && (
                        <div>
                          <h5 className="text-sm font-medium text-gray-700 mb-3">Attachments ({report.attachments.length})</h5>
                          <div className="flex flex-wrap gap-2">
                            {report.attachments.map((attachment, index) => (
                              <span key={index} className="px-2 py-1 text-xs bg-gray-100 text-gray-800 rounded-full">
                                {attachment}
                              </span>
                            ))}
                          </div>
                        </div>
                      )}

                      {/* Notes */}
                      {report.notes && (
                        <div>
                          <h5 className="text-sm font-medium text-gray-700 mb-2">Notes</h5>
                          <p className="text-sm text-gray-900">{report.notes}</p>
                        </div>
                      )}

                      {/* Actions */}
                      <div className="flex space-x-3 pt-4 border-t border-gray-200">
                        <button className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                          <Edit className="w-4 h-4 mr-2 inline" />
                          Edit Report
                        </button>
                        <button className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50">
                          <Eye className="w-4 h-4 mr-2 inline" />
                          View
                        </button>
                        <button className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50">
                          <Download className="w-4 h-4 mr-2 inline" />
                          Download
                        </button>
                        <button className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50">
                          <MoreVertical className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {activeTab === 'templates' && (
        <div className="space-y-6">
          <div className="bg-white rounded-lg border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Report Templates</h3>
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Template
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Type
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Regulatory Body
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Usage Count
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Last Used
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {templates.map((template) => (
                    <tr key={template.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm font-medium text-gray-900">{template.name}</div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 capitalize">
                        {template.type}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {template.regulatoryBody}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {template.usageCount}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {template.lastUsed}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <button className="text-blue-600 hover:text-blue-900 mr-3">
                          Use
                        </button>
                        <button className="text-gray-600 hover:text-gray-900">
                          <MoreVertical className="w-4 h-4" />
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      )}

      {activeTab === 'schedules' && (
        <div className="space-y-6">
          <div className="bg-white rounded-lg border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Report Schedules</h3>
            <div className="h-64 flex items-center justify-center bg-gray-50 rounded-lg">
              <div className="text-center">
                <Calendar className="w-12 h-12 text-gray-400 mx-auto mb-2" />
                <p className="text-gray-500">Report scheduling will be displayed here</p>
                <p className="text-sm text-gray-400 mt-2">Automate report generation and submission</p>
              </div>
            </div>
          </div>
        </div>
      )}

      {activeTab === 'analytics' && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className="bg-white rounded-lg border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Report Trends</h3>
            <div className="h-64 flex items-center justify-center bg-gray-50 rounded-lg">
              <div className="text-center">
                <BarChart3 className="w-12 h-12 text-gray-400 mx-auto mb-2" />
                <p className="text-gray-500">Report trends chart will be displayed here</p>
              </div>
            </div>
          </div>
          <div className="bg-white rounded-lg border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Submission Performance</h3>
            <div className="h-64 flex items-center justify-center bg-gray-50 rounded-lg">
              <div className="text-center">
                <PieChart className="w-12 h-12 text-gray-400 mx-auto mb-2" />
                <p className="text-gray-500">Submission performance will be displayed here</p>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default RegulatoryReporting
