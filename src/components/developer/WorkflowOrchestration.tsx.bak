import React, { useState, useEffect } from 'react'
import { 
  Workflow, 
  Zap, 
  Play, 
  Pause, 
  RotateCcw, 
  Settings, 
  Plus, 
  Edit, 
  Trash2, 
  Copy, 
  Download, 
  Upload, 
  RefreshCw, 
  CheckCircle, 
  XCircle, 
  AlertTriangle, 
  Info, 
  Search, 
  Filter, 
  ChevronDown, 
  ChevronRight, 
  ArrowRight, 
  BarChart3, 
  Activity, 
  Clock, 
  DollarSign, 
  Shield, 
  Globe, 
  Server, 
  Network, 
  HardDrive, 
  Cpu, 
  Wifi, 
  WifiOff, 
  Bell, 
  Mail, 
  MessageSquare, 
  FileText, 
  BookOpen, 
  ExternalLink, 
  Save, 
  X, 
  Target, 
  Layers, 
  Grid, 
  List, 
  Monitor, 
  Smartphone, 
  Tablet, 
  Laptop, 
  User, 
  UserCheck, 
  UserX, 
  Building, 
  Home, 
  LogIn, 
  LogOut, 
  Fingerprint, 
  Smartphone as Phone, 
  Mail as Email, 
  MessageSquare as Chat, 
  Calendar, 
  MapPin, 
  CreditCard, 
  TrendingUp, 
  TrendingDown, 
  Star, 
  Award, 
  Flag, 
  AlertCircle, 
  Check, 
  Minus, 
  MoreHorizontal, 
  MoreVertical,
  Key,
  Lock,
  Unlock,
  Eye,
  EyeOff
} from 'lucide-react'

interface WorkflowNode {
  id: string
  type: 'trigger' | 'action' | 'condition' | 'delay' | 'webhook' | 'notification'
  name: string
  description: string
  config: any
  position: { x: number; y: number }
  connections: string[]
}

interface WorkflowExecution {
  id: string
  workflowId: string
  status: 'running' | 'completed' | 'failed' | 'paused' | 'cancelled'
  startTime: string
  endTime?: string
  duration?: number
  steps: WorkflowStep[]
  input: any
  output?: any
  error?: string
}

interface WorkflowStep {
  id: string
  nodeId: string
  name: string
  status: 'pending' | 'running' | 'completed' | 'failed' | 'skipped'
  startTime: string
  endTime?: string
  duration?: number
  input: any
  output?: any
  error?: string
}

interface WorkflowTemplate {
  id: string
  name: string
  description: string
  category: string
  difficulty: 'easy' | 'medium' | 'hard'
  estimatedTime: string
  nodes: WorkflowNode[]
  tags: string[]
  usage: number
  rating: number
  createdBy: string
  createdAt: string
}

interface WorkflowOrchestrationProps {
  onCreateWorkflow: () => void
  onEditWorkflow: (workflow: any) => void
  onExecuteWorkflow: (workflow: any) => void
  onClose: () => void
}

const WorkflowOrchestration: React.FC<WorkflowOrchestrationProps> = ({
  onCreateWorkflow,
  onEditWorkflow,
  onExecuteWorkflow,
  onClose
}) => {
  const [activeTab, setActiveTab] = useState<'overview' | 'workflows' | 'executions' | 'templates' | 'monitoring' | 'settings'>('overview')
  const [selectedWorkflow, setSelectedWorkflow] = useState<any>(null)
  const [selectedExecution, setSelectedExecution] = useState<WorkflowExecution | null>(null)
  const [searchQuery, setSearchQuery] = useState('')
  const [statusFilter, setStatusFilter] = useState('all')
  const [isLoading, setIsLoading] = useState(false)

  const [workflows, setWorkflows] = useState<any[]>([])
  const [executions, setExecutions] = useState<WorkflowExecution[]>([])
  const [templates, setTemplates] = useState<WorkflowTemplate[]>([])

  useEffect(() => {
    loadWorkflowData()
  }, [])

  const loadWorkflowData = async () => {
    setIsLoading(true)
    
    // Mock data - in real app, this would come from API
    const mockWorkflows = [
      {
        id: '1',
        name: 'Customer Onboarding Flow',
        description: 'Automated customer onboarding with verification and welcome sequence',
        status: 'active',
        nodes: 8,
        executions: 1542,
        successRate: 96.8,
        lastRun: '2024-01-20T10:30:00Z',
        createdAt: '2024-01-15T14:30:00Z',
        createdBy: 'admin@idcertify.com'
      },
      {
        id: '2',
        name: 'Document Verification Pipeline',
        description: 'Automated document processing and verification workflow',
        status: 'active',
        nodes: 12,
        executions: 8920,
        successRate: 98.2,
        lastRun: '2024-01-20T09:45:00Z',
        createdAt: '2024-01-10T11:20:00Z',
        createdBy: 'ops@idcertify.com'
      },
      {
        id: '3',
        name: 'Compliance Reporting',
        description: 'Automated compliance report generation and distribution',
        status: 'paused',
        nodes: 6,
        executions: 234,
        successRate: 94.5,
        lastRun: '2024-01-19T16:15:00Z',
        createdAt: '2024-01-08T09:15:00Z',
        createdBy: 'compliance@idcertify.com'
      }
    ]

    const mockExecutions: WorkflowExecution[] = [
      {
        id: '1',
        workflowId: '1',
        status: 'completed',
        startTime: '2024-01-20T10:30:00Z',
        endTime: '2024-01-20T10:32:15Z',
        duration: 135,
        steps: [
          {
            id: '1',
            nodeId: 'trigger-1',
            name: 'Customer Registration Trigger',
            status: 'completed',
            startTime: '2024-01-20T10:30:00Z',
            endTime: '2024-01-20T10:30:05Z',
            duration: 5,
            input: { customerId: 'cust_12345', email: 'user@example.com' },
            output: { triggerId: 'trigger_001' }
          },
          {
            id: '2',
            nodeId: 'action-1',
            name: 'Send Welcome Email',
            status: 'completed',
            startTime: '2024-01-20T10:30:05Z',
            endTime: '2024-01-20T10:30:12Z',
            duration: 7,
            input: { email: 'user@example.com', template: 'welcome' },
            output: { emailId: 'email_001', status: 'sent' }
          }
        ],
        input: { customerId: 'cust_12345', email: 'user@example.com' },
        output: { success: true, customerId: 'cust_12345' }
      },
      {
        id: '2',
        workflowId: '2',
        status: 'running',
        startTime: '2024-01-20T10:25:00Z',
        steps: [
          {
            id: '3',
            nodeId: 'trigger-2',
            name: 'Document Upload Trigger',
            status: 'completed',
            startTime: '2024-01-20T10:25:00Z',
            endTime: '2024-01-20T10:25:03Z',
            duration: 3,
            input: { documentId: 'doc_67890', type: 'passport' },
            output: { triggerId: 'trigger_002' }
          },
          {
            id: '4',
            nodeId: 'action-2',
            name: 'OCR Processing',
            status: 'running',
            startTime: '2024-01-20T10:25:03Z',
            input: { documentId: 'doc_67890', type: 'passport' }
          }
        ],
        input: { documentId: 'doc_67890', type: 'passport' }
      }
    ]

    const mockTemplates: WorkflowTemplate[] = [
      {
        id: '1',
        name: 'KYC Verification Flow',
        description: 'Complete KYC verification workflow with document and identity checks',
        category: 'Verification',
        difficulty: 'medium',
        estimatedTime: '45 minutes',
        nodes: [
          { id: '1', type: 'trigger', name: 'Document Upload', description: 'Triggered when document is uploaded' },
          { id: '2', type: 'action', name: 'OCR Processing', description: 'Extract text from document' },
          { id: '3', type: 'condition', name: 'Document Valid?', description: 'Check if document is valid' },
          { id: '4', type: 'action', name: 'Identity Verification', description: 'Verify identity against database' }
        ],
        tags: ['kyc', 'verification', 'compliance'],
        usage: 1250,
        rating: 4.8,
        createdBy: 'IDCertify Team',
        createdAt: '2024-01-01T00:00:00Z'
      },
      {
        id: '2',
        name: 'Customer Support Automation',
        description: 'Automated customer support workflow with ticket routing and responses',
        category: 'Support',
        difficulty: 'easy',
        estimatedTime: '20 minutes',
        nodes: [
          { id: '1', type: 'trigger', name: 'Support Ticket Created', description: 'Triggered when ticket is created' },
          { id: '2', type: 'condition', name: 'Priority Check', description: 'Determine ticket priority' },
          { id: '3', type: 'action', name: 'Route to Agent', description: 'Assign ticket to appropriate agent' },
          { id: '4', type: 'notification', name: 'Send Notification', description: 'Notify assigned agent' }
        ],
        tags: ['support', 'automation', 'routing'],
        usage: 890,
        rating: 4.6,
        createdBy: 'Support Team',
        createdAt: '2024-01-05T00:00:00Z'
      }
    ]

    setTimeout(() => {
      setWorkflows(mockWorkflows)
      setExecutions(mockExecutions)
      setTemplates(mockTemplates)
      setIsLoading(false)
    }, 1000)
  }

  const filteredWorkflows = workflows.filter(workflow => {
    const matchesSearch = workflow.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         workflow.description.toLowerCase().includes(searchQuery.toLowerCase())
    
    const matchesStatus = statusFilter === 'all' || workflow.status === statusFilter
    
    return matchesSearch && matchesStatus
  })

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active':
        return 'bg-green-100 text-green-800'
      case 'inactive':
        return 'bg-gray-100 text-gray-800'
      case 'paused':
        return 'bg-yellow-100 text-yellow-800'
      case 'running':
        return 'bg-blue-100 text-blue-800'
      case 'completed':
        return 'bg-green-100 text-green-800'
      case 'failed':
        return 'bg-red-100 text-red-800'
      case 'cancelled':
        return 'bg-gray-100 text-gray-800'
      default:
        return 'bg-gray-100 text-gray-800'
    }
  }

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'easy':
        return 'bg-green-100 text-green-800'
      case 'medium':
        return 'bg-yellow-100 text-yellow-800'
      case 'hard':
        return 'bg-red-100 text-red-800'
      default:
        return 'bg-gray-100 text-gray-800'
    }
  }

  const formatDuration = (seconds: number) => {
    if (seconds < 60) return `${seconds}s`
    if (seconds < 3600) return `${Math.floor(seconds / 60)}m ${seconds % 60}s`
    return `${Math.floor(seconds / 3600)}h ${Math.floor((seconds % 3600) / 60)}m`
  }

  return (
    <div className="fixed inset-0 bg-gray-900 z-50 flex flex-col">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 px-6 py-4 flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <h1 className="text-xl font-semibold text-gray-900">Workflow Orchestration</h1>
          <span className="px-3 py-1 bg-orange-100 text-orange-800 text-sm font-medium rounded-full">
            Automation
          </span>
        </div>
        
        <div className="flex items-center space-x-3">
          <button
            onClick={() => setActiveTab('monitoring')}
            className="flex items-center space-x-2 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
          >
            <BarChart3 className="h-4 w-4" />
            <span>Monitoring</span>
          </button>
          
          <button
            onClick={() => onCreateWorkflow()}
            className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <Plus className="h-4 w-4" />
            <span>Create Workflow</span>
          </button>
          
          <button
            onClick={onClose}
            className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
          >
            Close
          </button>
        </div>
      </div>

      <div className="flex-1 flex">
        {/* Sidebar */}
        <div className="w-80 bg-white border-r border-gray-200 p-6 overflow-y-auto">
          <div className="space-y-6">
            {/* Tabs */}
            <div className="space-y-2">
              {[
                { id: 'overview', name: 'Overview', icon: BarChart3 },
                { id: 'workflows', name: 'Workflows', icon: Workflow },
                { id: 'executions', name: 'Executions', icon: Activity },
                { id: 'templates', name: 'Templates', icon: FileText },
                { id: 'monitoring', name: 'Monitoring', icon: Monitor },
                { id: 'settings', name: 'Settings', icon: Settings }
              ].map((tab) => {
                const Icon = tab.icon
                return (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id as any)}
                    className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors ${
                      activeTab === tab.id
                        ? 'bg-blue-100 text-blue-700'
                        : 'text-gray-600 hover:bg-gray-50'
                    }`}
                  >
                    <Icon className="h-5 w-5" />
                    <span className="font-medium">{tab.name}</span>
                  </button>
                )
              })}
            </div>

            {/* Filters */}
            {activeTab === 'workflows' && (
              <div className="pt-6 border-t border-gray-200">
                <h3 className="text-sm font-medium text-gray-900 mb-3">Filters</h3>
                <div className="space-y-3">
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">
                      Search
                    </label>
                    <div className="relative">
                      <Search className="absolute left-2 top-1/2 transform -translate-y-1/2 h-3 w-3 text-gray-400" />
                      <input
                        type="text"
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                        className="w-full pl-7 pr-2 py-1 text-xs border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                        placeholder="Search workflows..."
                      />
                    </div>
                  </div>
                  
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">
                      Status
                    </label>
                    <select
                      value={statusFilter}
                      onChange={(e) => setStatusFilter(e.target.value)}
                      className="w-full px-2 py-1 text-xs border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                    >
                      <option value="all">All Status</option>
                      <option value="active">Active</option>
                      <option value="inactive">Inactive</option>
                      <option value="paused">Paused</option>
                    </select>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Main Content */}
        <div className="flex-1 flex flex-col">
          {activeTab === 'overview' && (
            <div className="p-6 space-y-6">
              <div>
                <h2 className="text-lg font-semibold text-gray-900 mb-2">Workflow Overview</h2>
                <p className="text-gray-600">
                  Orchestrate and automate complex business processes with visual workflow builder.
                </p>
              </div>

              {/* Key Metrics */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div className="bg-white p-6 rounded-lg border border-gray-200">
                  <div className="flex items-center">
                    <Workflow className="h-8 w-8 text-blue-600" />
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">Active Workflows</p>
                      <p className="text-2xl font-bold text-gray-900">
                        {workflows.filter(w => w.status === 'active').length}
                      </p>
                    </div>
                  </div>
                </div>
                
                <div className="bg-white p-6 rounded-lg border border-gray-200">
                  <div className="flex items-center">
                    <Activity className="h-8 w-8 text-green-600" />
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">Total Executions</p>
                      <p className="text-2xl font-bold text-gray-900">
                        {workflows.reduce((acc, w) => acc + w.executions, 0).toLocaleString()}
                      </p>
                    </div>
                  </div>
                </div>
                
                <div className="bg-white p-6 rounded-lg border border-gray-200">
                  <div className="flex items-center">
                    <CheckCircle className="h-8 w-8 text-green-600" />
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">Avg Success Rate</p>
                      <p className="text-2xl font-bold text-gray-900">
                        {(workflows.reduce((acc, w) => acc + w.successRate, 0) / workflows.length).toFixed(1)}%
                      </p>
                    </div>
                  </div>
                </div>
                
                <div className="bg-white p-6 rounded-lg border border-gray-200">
                  <div className="flex items-center">
                    <Clock className="h-8 w-8 text-purple-600" />
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">Running Now</p>
                      <p className="text-2xl font-bold text-gray-900">
                        {executions.filter(e => e.status === 'running').length}
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Recent Executions */}
              <div className="bg-white rounded-lg border border-gray-200 p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Executions</h3>
                <div className="space-y-4">
                  {executions.slice(0, 5).map((execution) => (
                    <div key={execution.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <div className="p-2 bg-blue-100 rounded-lg">
                          <Activity className="h-4 w-4 text-blue-600" />
                        </div>
                        <div>
                          <p className="text-sm font-medium text-gray-900">
                            Workflow {execution.workflowId}
                          </p>
                          <p className="text-xs text-gray-600">
                            Started: {new Date(execution.startTime).toLocaleString()}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <span className={`px-2 py-1 text-xs font-semibold rounded ${getStatusColor(execution.status)}`}>
                          {execution.status}
                        </span>
                        {execution.duration && (
                          <span className="text-xs text-gray-500">
                            {formatDuration(execution.duration)}
                          </span>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'workflows' && (
            <div className="p-6 space-y-6">
              <div>
                <h2 className="text-lg font-semibold text-gray-900 mb-2">Workflows</h2>
                <p className="text-gray-600">
                  Manage and monitor your automated workflows.
                </p>
              </div>

              {/* Workflows List */}
              <div className="space-y-4">
                {isLoading ? (
                  <div className="flex items-center justify-center py-12">
                    <RefreshCw className="h-8 w-8 animate-spin text-gray-400" />
                    <span className="ml-2 text-gray-600">Loading workflows...</span>
                  </div>
                ) : (
                  filteredWorkflows.map((workflow) => (
                    <div
                      key={workflow.id}
                      className="bg-white rounded-lg border border-gray-200 p-6 hover:shadow-lg transition-shadow cursor-pointer"
                      onClick={() => setSelectedWorkflow(workflow)}
                    >
                      <div className="flex items-start justify-between mb-4">
                        <div className="flex items-center space-x-3">
                          <div className="p-2 bg-blue-100 rounded-lg">
                            <Workflow className="h-6 w-6 text-blue-600" />
                          </div>
                          <div>
                            <h3 className="text-lg font-semibold text-gray-900">{workflow.name}</h3>
                            <p className="text-sm text-gray-600">{workflow.description}</p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <span className={`px-2 py-1 text-xs font-semibold rounded ${getStatusColor(workflow.status)}`}>
                            {workflow.status}
                          </span>
                        </div>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
                        <div>
                          <p className="text-sm text-gray-600">Nodes</p>
                          <p className="text-lg font-semibold text-gray-900">{workflow.nodes}</p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-600">Executions</p>
                          <p className="text-lg font-semibold text-gray-900">
                            {workflow.executions.toLocaleString()}
                          </p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-600">Success Rate</p>
                          <p className="text-lg font-semibold text-gray-900">
                            {workflow.successRate}%
                          </p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-600">Last Run</p>
                          <p className="text-lg font-semibold text-gray-900">
                            {new Date(workflow.lastRun).toLocaleDateString()}
                          </p>
                        </div>
                      </div>
                      
                      <div className="flex items-center justify-between pt-4 border-t border-gray-200">
                        <div className="text-sm text-gray-600">
                          Created by {workflow.createdBy} • {new Date(workflow.createdAt).toLocaleDateString()}
                        </div>
                        <div className="flex items-center space-x-2">
                          <button
                            onClick={(e) => {
                              e.stopPropagation()
                              onExecuteWorkflow(workflow)
                            }}
                            className="p-1 text-gray-400 hover:text-green-600"
                          >
                            <Play className="h-4 w-4" />
                          </button>
                          <button
                            onClick={(e) => {
                              e.stopPropagation()
                              onEditWorkflow(workflow)
                            }}
                            className="p-1 text-gray-400 hover:text-blue-600"
                          >
                            <Edit className="h-4 w-4" />
                          </button>
                        </div>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>
          )}

          {activeTab === 'templates' && (
            <div className="p-6 space-y-6">
              <div>
                <h2 className="text-lg font-semibold text-gray-900 mb-2">Workflow Templates</h2>
                <p className="text-gray-600">
                  Pre-built workflow templates for common business processes.
                </p>
              </div>

              {/* Templates Grid */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {templates.map((template) => (
                  <div
                    key={template.id}
                    className="bg-white rounded-lg border border-gray-200 p-6 hover:shadow-lg transition-shadow cursor-pointer"
                  >
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex items-center space-x-3">
                        <div className="p-2 bg-blue-100 rounded-lg">
                          <Workflow className="h-6 w-6 text-blue-600" />
                        </div>
                        <div>
                          <h3 className="text-lg font-semibold text-gray-900">{template.name}</h3>
                          <p className="text-sm text-gray-600">{template.description}</p>
                        </div>
                      </div>
                      <span className={`px-2 py-1 text-xs font-semibold rounded ${getDifficultyColor(template.difficulty)}`}>
                        {template.difficulty}
                      </span>
                    </div>
                    
                    <div className="space-y-3 mb-4">
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-gray-600">Category</span>
                        <span className="font-medium text-gray-900">{template.category}</span>
                      </div>
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-gray-600">Estimated Time</span>
                        <span className="font-medium text-gray-900">{template.estimatedTime}</span>
                      </div>
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-gray-600">Nodes</span>
                        <span className="font-medium text-gray-900">{template.nodes.length}</span>
                      </div>
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-gray-600">Usage</span>
                        <span className="font-medium text-gray-900">{template.usage.toLocaleString()}</span>
                      </div>
                    </div>
                    
                    <div className="flex items-center justify-between pt-4 border-t border-gray-200">
                      <div className="flex items-center space-x-2">
                        <div className="flex items-center">
                          <Star className="h-4 w-4 text-yellow-400 fill-current" />
                          <span className="ml-1 text-sm text-gray-600">{template.rating}</span>
                        </div>
                        <span className="text-sm text-gray-600">by {template.createdBy}</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <button className="p-1 text-gray-400 hover:text-blue-600">
                          <Eye className="h-4 w-4" />
                        </button>
                        <button className="px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700">
                          Use Template
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

export default WorkflowOrchestration
